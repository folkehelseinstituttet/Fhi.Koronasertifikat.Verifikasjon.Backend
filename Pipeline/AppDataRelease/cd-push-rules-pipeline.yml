parameters:
  - name: containerRegistry
    type: string
    default: ''
  - name: appVersion
    type: string
    default: ''
  - name: doRelease
    type: string
    default: 'false'
  - name: environment
    type: string
    default: ''
  - name: buildContext
    default: 'FHICORC.Backend'
    type: string
  - name: dbMigrationsImageName
    type: string
    default: 'fhicorc-verification-dbmigrations'

jobs:
  - job: build_and_push_data_image_job
    displayName: Build and push data image
    condition: eq('${{ parameters.doRelease }}', 'true')
    steps:
      - checkout: self
      - script: |
          echo '##[error] containerRegistry must have a value'
          exit 1
        condition: eq('${{ parameters.containerRegistry }}', '')
        displayName: Check if containerRegistry is defined
      - script: |
          echo '##[error] appVersion must have a value'
          exit 1
        condition: eq('${{ parameters.appVersion }}', '')
        displayName: Check if appVersion is defined
      - task: PowerShell@2
        displayName: Generate rules SQL
        inputs:
          targetType: 'inline'
          pwsh: true
          script: |
            $rulesJson = Get-Content './AppRules/Norwegian Rules.json' | ConvertFrom-Json
            $rulesSql = ($rulesJson | ForEach-Object { "INSERT INTO public.`"BusinessRules`" (`"RuleIdentifier`", `"RuleJson`")`n    VALUES ('$(($_.Identifier) -replace `"'`", `"''`")', '$((ConvertTo-Json $_ -Depth 100) -replace `"'`", `"''`")')`nON CONFLICT (`"RuleIdentifier`")`nDO UPDATE SET `"RuleJson`" = EXCLUDED.`"RuleJson`", `"Created`" = now() at time zone 'utc';`n"}) -join "`n"
            $ids = ($rulesJson | ForEach-Object {"'$(($_.Identifier) -replace "'", "''")'"}) -join ', '
            $rulesSql = "$($rulesSql)`nDELETE FROM public.`"BusinessRules`"`nWHERE `"RuleIdentifier`" NOT IN ($($ids));`n"
            Set-Content -Path './FHICORC.Backend/FHICORC.ApplicationHost.DbMigrations/DataScript.sql' -Value $rulesSql -Encoding utf8
      - task: Docker@2
        displayName: Build DbMigrations image
        inputs:
          containerRegistry: ${{ parameters.containerRegistry }}
          repository: ${{ parameters.dbMigrationsImageName }}
          ${{ if ne(parameters.environment, 'test') }}:
            tags: ${{ parameters.appVersion }}
          ${{ if eq(parameters.environment, 'test') }}:
            tags: |
              ${{ parameters.appVersion }}
              latest
          command: build
          DockerFile: ${{ parameters.buildContext }}/FHICORC.ApplicationHost.DbMigrations/Dockerfile
          buildContext: ${{ parameters.buildContext }}
      - task: Docker@2 
        displayName: Push DbMigrations image to repository
        inputs:
          containerRegistry: ${{ parameters.containerRegistry }}
          repository: ${{ parameters.dbMigrationsImageName }}
          ${{ if ne(parameters.environment, 'test') }}:
            tags: ${{ parameters.appVersion }}
          ${{ if eq(parameters.environment, 'test') }}:
            tags: |
              ${{ parameters.appVersion }}
              latest
          command: push
